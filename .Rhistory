dplyr::mutate(Sex = ifelse(Sex == "no" | Sex == "na", NA, Sex))
df_PSA001_valid_merge <- merge(df_PSA001_valid_sex, df_regionCode, by.x = "Countries", by.y = "country_iso2")
df_PSA001_valid_merge_sex_ratio <- df_PSA001_valid_merge %>%
dplyr::filter(!is.na(Sex)) %>%
dplyr::count(weird, Countries, Sex) %>%
dplyr::group_by(weird, Countries) %>%
dplyr::mutate(Proportion = round(n / sum(n), 2)) %>%
dplyr::arrange(Sex, Proportion) %>%
dplyr::ungroup()
countries_order_sex <- df_PSA001_valid_merge_sex_ratio %>%
dplyr::filter(Sex == "f") %>%
dplyr::pull(Countries)
df_PSA001_valid_merge_sex_ratio_sored <- df_PSA001_valid_merge_sex_ratio %>%
dplyr::mutate(Countries = factor(Countries, levels = countries_order_sex))
df_PSA001_valid_merge_sex_ratio_sored %>%
dplyr::mutate(Proportion = Proportion * 100) %>%
write.csv(., "PSA001_sex_ratio_all.csv", row.names = F)
df_PSA001_valid_merge_sex_ratio_sored_wide <- df_PSA001_valid_merge_sex_ratio_sored %>%
dplyr::select(-c(weird,n)) %>%
dplyr::mutate(Proportion = Proportion * 100)  %>%
tidyr::pivot_wider(names_from = "Countries", values_from = "Proportion")
df_PSA001_valid_merge_sex_ratio_sored_wide %>%
write.csv(., "Fig4a_sex_wide.csv", row.names = F)
View(df_sex_ratio_jasp)
library(tidyverse)
?lgamma
alphas <- data.frame(levels = c("f", "m"),count=c(1,1))
alphas
counts <- df_sex_ratio_jasp %>% dplyr::select(CFPS2018)
counts
counts <- df_sex_ratio_jasp %>% dplyr::select(PSA001)
counts
thetas <- df_sex_ratio_jasp$Census6[1]/sum(df_sex_ratio_jasp$Census6)
thetas
# compute Bayes factor
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
alphas <- data.frame(count=factor(c(1,1), levels=c("f", "m")))
alphas
alphas <- data.frame(count=c(1,1), rownames=c("f", "m"))
alphas
alphas <- data.frame(count=c(1,1))
alphas
# compute Bayes factor
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.xa
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
lbeta.a
any(rowSums(cbind(thetas, counts)) == 0)
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
LogBF10
exp(LogBF10
)
counts
expected
expected <- setNames(sum(counts)*thetas, names(counts))
expected
alphas
counts
thetas
LogBF10
BF10    = .clean(exp(LogBF10))
exp(LogBF10)
thetas <- df_sex_ratio_jasp$Census6[2]/sum(df_sex_ratio_jasp$Census6)
thetas
counts <- df_sex_ratio_jasp %>% dplyr::arrange(Sex)
View(counts)
counts <- df_sex_ratio_jasp %>% dplyr::arrange(Sex) %>% dplyr::select(PSA001)
counts
# compute Bayes factor
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
LogBF10
(lbeta.xa-lbeta.a)
sum(counts * log(thetas))
lbeta.a
alphas
lgamma(alphas)
lgamma(sum(alphas))
sum(alphas)
lgamma(2)
lgamma(1)
lgamma(3)
lgamma(4)
lgamma(5)
gamma(5)
log(24)
?gamma
getwd()
?setNames
a_tmp <- setNames(c(1,1), c("female", "male"))
a_tmp
counts_tmp <- c(69, 31)
dataTable_tmp <- counts_tmp
names(dataTable_tmp) <- c("female", "male")
?chisq.test
colnames(eProps_tmp) <- "census_6"
eProps_tmp <- c(49, 51)
colnames(eProps_tmp) <- "census_6"
View(df_sex_ratio_jasp)
library(tidyverse)
eProps_tmp <- df_sex_ratio_jasp %>% dplyr::select(Census_6)
eProps_tmp <- df_sex_ratio_jasp %>% dplyr::select(Census_)
colnames(eProps_tmp) <- "Census_6"
eProps_tmp <- df_sex_ratio_jasp %>% dplyr::select(Census6)
View(eProps_tmp)
colnames(eProps_tmp) <- "Census_6"
fact_tmp <- c("female", "male")
rownames(eProps_tmp) <- fact_tmp
eProps_tmp <- df_sex_ratio_jasp %>% dplyr::arrange(Sex) %>% dplyr::select(Census6)
colnames(eProps_tmp) <- "Census_6"
rownames(eProps_tmp) <- fact_tmp
expectedDf_tmp <- as.data.frame(eProps_tmp)
expectedDf_tmp
View(expectedDf_tmp)
hyps <- as.list(expectedDf_tmp)
View(hyps)
aplhas_tmp <- a_tmp
counts_tmp <- dataTable_tmp
thetas_tmp <- hyps[[1]]
View(counts)
if(sum(thetas_tmp) != 1) {
thetas_tmp <- thetas_tmp/sum(thetas_tmp)
}
expected_tmp <- setNames(sum(counts_tmp)*thetas, names(counts))
expected_tmp
expected_tmp <- setNames(sum(counts_tmp)*thetas, names(counts_tmp))
expected_tmp <- setNames(sum(counts_tmp)*thetas_tmp, names(counts_tmp))
lbeta.xa_tmp <- sum(lgamma(alphas_tmp + counts_tmp)) - lgamma(sum(alphas_tmp + counts_tmp))
alphas_tmp <- a_tmp
lbeta.xa_tmp <- sum(lgamma(alphas_tmp + counts_tmp)) - lgamma(sum(alphas_tmp + counts_tmp))
lbeta.xa_tmp
lbeta.a_tmp  <- sum(lgamma(alphas_tmp)) - lgamma(sum(alphas_tmp))
lbeta.a_tmp
any(rowSums(cbind(thetas_tmp, counts_tmp)) == 0)
log(thetas_tmp)
counts_tmp * log(thetas_tmp)
sum(counts_tmp * log(thetas_tmp))
(0 - sum(counts_tmp * log(thetas_tmp)))
(lbeta.xa_tmp - lbeta.a_tmp)
LogBF10_tmp <- (lbeta.xa_tmp - lbeta.a_tmp) + (0 - sum(counts_tmp * log(thetas_tmp)))
LogBF10_tmp
exp(LogBF10_tmp)
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
fact_level <- dataset %>% as.factor(dplyr::select(factor))
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphs <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = .clean(LogBF10),
BF10    = .clean(exp(LogBF10)),
BF01    = .clean(1/exp(LogBF10)))
return(list(BF       = BF,
expected = expected))
}
tmp <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
fact_level <- dataset %>% dplyr::select(factor) %>% as.factor(.)
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
fact_level <- dataset %>% dplyr::select(factor) %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphs <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = .clean(LogBF10),
BF10    = .clean(exp(LogBF10)),
BF01    = .clean(1/exp(LogBF10)))
return(list(BF       = BF,
expected = expected))
}
tmp <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
fact_level <- dataset %>% dplyr::select(factor) %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphs <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = LogBF10,
BF10    = exp(LogBF10),
BF01    = 1/exp(LogBF10))
return(list(BF       = BF,
expected = expected))
}
tmp <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
View(tmp)
df_sex_ratio_jasp %>% dplyr::select("Sex") %>% as.factor()
df_sex_ratio_jasp %>% dplyr::select("Sex") %>% dplyr::pull() %>% as.factor()
fact_level <- df_sex_ratio_jasp %>% dplyr::select("Sex") %>% dplyr::pull() %>% as.factor()
fact_level
observed <- df_sex_ratio_jasp %>% dplyr::select(PSA001) %>% dplyr::pull()
observed
names(observed) <- fact_level
observed
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
library(tidyverse)
fact_level <- dataset %>% dplyr::select(factor) %>% dplyr::pull() #  %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphs <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = LogBF10,
BF10    = exp(LogBF10),
BF01    = 1/exp(LogBF10))
return(list(BF       = BF,
expected = expected))
}
tmp <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
library(tidyverse)
fact_level <- dataset %>% dplyr::select(factor) %>% dplyr::pull() #  %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphs <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = LogBF10,
BF10    = exp(LogBF10),
BF01    = 1/exp(LogBF10))
return(list(BF       = BF,
expected = expected))
}
tmp <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
View(tmp)
BF10_sex <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
View(df_PSA001_Age)
View(df_PSA001_Age)
View(df_PSA001)
View(df_PSA001_Age)
df_age_ratio_jasp <- read.csv('figure3b_data_1.csv')
View(df_age_ratio_jasp)
BF10_age <- BayesMultiNomial(dataset = df_age_ratio_jasp, factor = "AgeRange", observed = "PsychSample", expected = "Census6")
View(BF10_age)
fact_level <- df_age_ratio_jasp %>% dplyr::select("AgeRange") %>% dplyr::pull()
fact_level
observed <- df_age_ratio_jasp %>% dplyr::select("PsychSample") %>% dplyr::pull()
observed
expected <- df_age_ratio_jasp %>% dplyr::select("Census6") %>% dplyr::pull()
expected
n_levels <- length(observed)
n_levels
prior <- rep(1, 7)
prior
sum(expected) !=1
thetas <- expected/sum(expected)
thetas
any(rowSums(cbind(thetas, observed)) == 0)
lbeta.xa <- sum(lgamma(prior + observed)) - lgamma(sum(prior + observed))
lbeta.a  <- sum(lgamma(prior)) - lgamma(sum(prior))
lbeta.xa - lbeta.a
0 - sum(observed * log(thetas))
(lbeta.xa-lbeta.a) + (0 - sum(observed * log(thetas)))
BF10_age <- BayesMultiNomial(dataset = df_age_ratio_jasp, factor = "AgeRange", observed = "PsychSample", expected = "Census6")
View(BF10_age)
rm(list = ls())
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
library(tidyverse)
fact_level <- dataset %>% dplyr::select(factor) %>% dplyr::pull() #  %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphs <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = LogBF10,
BF10    = exp(LogBF10),
BF01    = 1/exp(LogBF10))
return(list(BF       = BF,
expected = expected))
}
df_age_ratio_jasp <- read.csv('figure3b_data_1.csv')
BF10_age <- BayesMultiNomial(dataset = df_age_ratio_jasp, factor = "AgeRange", observed = "PsychSample", expected = "Census6")
rm(list = ls())
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
library(tidyverse)
fact_level <- dataset %>% dplyr::select(factor) %>% dplyr::pull() #  %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphas <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = LogBF10,
BF10    = exp(LogBF10),
BF01    = 1/exp(LogBF10))
return(list(BF       = BF,
expected = expected))
}
df_age_ratio_jasp <- read.csv('figure3b_data_1.csv')
BF10_age <- BayesMultiNomial(dataset = df_age_ratio_jasp, factor = "AgeRange", observed = "PsychSample", expected = "Census6")
View(BF10_age)
BF10_age$BF
BF10_age$BF$LogBF10
lgamma(1)
alphas <- df_age_ratio_jasp$Census6/sum(df_age_ratio_jasp$Census6)
sum(lgamma(alphas))
lgamma(sum(alphas))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
library(tidyverse)
library(ggridges)
library(openxlsx)
library(ggh4x)
library(stringr)
library(patchwork)
rm(list = ls())
# define a function to calculate the Bayesian multinomial test as in JASP
# these code were from: https://github.com/jasp-stats/jaspFrequencies/blob/d48babf63b14526abaf2c208c8ae769801b6d4db/R/multinomialtestbayesian.R#L384
BayesMultiNomial <- function(dataset, factor, observed, expected, default_prior = TRUE, prior = NA){
# datase - the input dataframe
# factor - column name of the factor,
# observed - column name of the column contains counts information for the observed,
# expected - column name of the column contains counts information for the expected,
# default_prior - whether use the default, defused prior
# prior - priors defined by users
library(tidyverse)
fact_level <- dataset %>% dplyr::select(factor) %>% dplyr::pull() #  %>% as.factor(.)
observed_data <- dataset %>% dplyr::select(observed) %>% dplyr::pull()
names(observed_data) <- fact_level
expected_data <- dataset %>% dplyr::select(expected) %>% dplyr::pull()
n_levels <- length(observed_data)
if (default_prior & is.na(prior)) {
prior <- rep(1, n_levels)
} else{
prior <- prior
}
alphas <- prior
counts <- observed_data
thetas <- expected_data
if(sum(thetas) != 1) {
thetas <- thetas/sum(thetas)
}
expected <- setNames(sum(counts)*thetas, names(counts))
lbeta.xa <- sum(lgamma(alphas + counts)) - lgamma(sum(alphas + counts))
lbeta.a  <- sum(lgamma(alphas)) - lgamma(sum(alphas))
if (any(rowSums(cbind(thetas, counts)) == 0)) {
LogBF10 <- (lbeta.xa-lbeta.a)
} else {
LogBF10 <- (lbeta.xa-lbeta.a) + (0 - sum(counts * log(thetas)))
}
BF <- data.frame(LogBF10 = LogBF10,
BF10    = exp(LogBF10),
BF01    = 1/exp(LogBF10))
return(list(BF       = BF,
expected = expected))
}
load("df_chinese_subj_rr_stage1.RData")
# Load regions code
# df_regionCode <- read.xlsx("Chin_Subj_F4(5)_region.xlsx")
# save(df_census6, df_CFPS2018, df_PSA001, df_regionCode, file = "df_chinese_subj_rr_stage1.RData")
# check data
str(df_PSA001) # have an overview of the data
str(df_CFPS2018)
str(df_census6)
str(df_regionCode)
df_PSA001_sex <- df_PSA001 %>%
dplyr::count(Sex) %>%
dplyr::mutate(Proportion = round(n / sum(n), 2) * 100,
Site = "PSA001",
Sex = ifelse(Sex == "f", 'female', 'male' )) %>%
dplyr::select(Site, Sex, Proportion)
df_census6_sex <- df_census6 %>%
dplyr::select(c(6,7)) %>%        # select columns
dplyr::slice(c(5)) %>%
dplyr::rename(male=1,
female=2) %>%
dplyr::mutate(Site = "Census6") %>%
tidyr::pivot_longer(c(male, female),
names_to = "Sex",
values_to = "Proportion") %>%
dplyr::mutate(Proportion = round(as.numeric(Proportion), 0))
df_CFPS2018_sex <- df_CFPS2018 %>%
dplyr::rename(Sex = QA002) %>%
dplyr::count(Sex) %>%
dplyr::filter(!is.na(Sex)) %>%
dplyr::mutate(Proportion = round(n / sum(n), 2) * 100,
Site = "CFPS2018",
Sex = ifelse(Sex == 1, "male", "female")) %>%
dplyr::select(Site, Sex, Proportion)
df_sex_ratio <- rbind(df_census6_sex, df_CFPS2018_sex, df_PSA001_sex)
### get the data for Bayesian mutlinomial test as in JASP
df_sex_ratio_jasp <- df_sex_ratio %>%
tidyr::pivot_wider(names_from = Site,
values_from = Proportion)
BF_h2a_sex <- BayesMultiNomial(dataset = df_sex_ratio_jasp, factor = "Sex", observed = "PSA001", expected = "Census6")
View(BF_h2a_sex)
?lgamma
